name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
        - os: ubuntu-latest
          PLAT: linux
          EXE: slope_defense
        - os: windows-latest
          PLAT: windows
          EXE: slope_defense.exe
        - os: macos-latest
          PLAT: mac
          EXE: slope_defense

    steps:
    - uses: actions/checkout@v2

    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y libglfw3-dev gcc-multilib g++-multilib libfreetype6-dev libxinerama-dev libxcursor-dev libxi-dev libgtk-3-dev

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build .

    - name: Check Product
      working-directory: ${{github.workspace}}/build/${{BUILD_TYPE}}
      shell: bash
      run: |
        ls -la
        file $EXE

    - name: Package Product
      working-directory: ${{github.workspace}}/build/${{BUILD_TYPE}}
      run: |
        chmod +x $EXE
        tar -cvf slope-defense-$PLAT.tar $EXE

    - name: Archive Product
      uses: actions/upload-artifact@v3
      with:
        name: slope-defense-$PLAT
        path: build/$BUILD_TYPE/slope-defense-$PLAT.tar
        if-no-files-found: error


  # Emscripten:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 1

  #   - name: Install Dependencies
  #     run: |
  #       wget -q https://github.com/emscripten-core/emsdk/archive/master.tar.gz
  #       tar -xvf master.tar.gz
  #       emsdk-master/emsdk update
  #       emsdk-master/emsdk install latest
  #       emsdk-master/emsdk activate latest

  #   - name: Build
  #     run: |
  #       source emsdk-master/emsdk_env.sh
  #       make -f Makefile.emscripten

  #   - name: Check Product
  #     run: |
  #       ls -l slope-defense_emscripten.*
  #       file slope-defense_emscripten.*

  #   - name: Package Product
  #     run: |
  #       zip -r slope-defense-web.zip slope-defense_emscripten.*

  #   - name: Archive Product
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: slope-defense-web.zip
  #       path: slope-defense-web.zip
